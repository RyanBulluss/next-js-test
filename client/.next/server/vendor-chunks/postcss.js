"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postcss";
exports.ids = ["vendor-chunks/postcss"];
exports.modules = {

/***/ "(ssr)/./node_modules/postcss/lib/comment.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/comment.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Node = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/postcss/lib/node.js\");\nclass Comment extends Node {\n    constructor(defaults){\n        super(defaults);\n        this.type = \"comment\";\n    }\n}\nmodule.exports = Comment;\nComment.default = Comment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY29tbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLE1BQU1DLGdCQUFnQkY7SUFDcEJHLFlBQVlDLFFBQVEsQ0FBRTtRQUNwQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR0w7QUFDakJBLFFBQVFNLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY29tbWVudC5qcz8zZjgzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgTm9kZSA9IHJlcXVpcmUoJy4vbm9kZScpXG5cbmNsYXNzIENvbW1lbnQgZXh0ZW5kcyBOb2RlIHtcbiAgY29uc3RydWN0b3IoZGVmYXVsdHMpIHtcbiAgICBzdXBlcihkZWZhdWx0cylcbiAgICB0aGlzLnR5cGUgPSAnY29tbWVudCdcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbW1lbnRcbkNvbW1lbnQuZGVmYXVsdCA9IENvbW1lbnRcbiJdLCJuYW1lcyI6WyJOb2RlIiwicmVxdWlyZSIsIkNvbW1lbnQiLCJjb25zdHJ1Y3RvciIsImRlZmF1bHRzIiwidHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/comment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/css-syntax-error.js":
/*!******************************************************!*\
  !*** ./node_modules/postcss/lib/css-syntax-error.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet pico = __webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\");\nlet terminalHighlight = __webpack_require__(/*! ./terminal-highlight */ \"(ssr)/./node_modules/postcss/lib/terminal-highlight.js\");\nclass CssSyntaxError extends Error {\n    constructor(message, line, column, source, file, plugin){\n        super(message);\n        this.name = \"CssSyntaxError\";\n        this.reason = message;\n        if (file) {\n            this.file = file;\n        }\n        if (source) {\n            this.source = source;\n        }\n        if (plugin) {\n            this.plugin = plugin;\n        }\n        if (typeof line !== \"undefined\" && typeof column !== \"undefined\") {\n            if (typeof line === \"number\") {\n                this.line = line;\n                this.column = column;\n            } else {\n                this.line = line.line;\n                this.column = line.column;\n                this.endLine = column.line;\n                this.endColumn = column.column;\n            }\n        }\n        this.setMessage();\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, CssSyntaxError);\n        }\n    }\n    setMessage() {\n        this.message = this.plugin ? this.plugin + \": \" : \"\";\n        this.message += this.file ? this.file : \"<css input>\";\n        if (typeof this.line !== \"undefined\") {\n            this.message += \":\" + this.line + \":\" + this.column;\n        }\n        this.message += \": \" + this.reason;\n    }\n    showSourceCode(color) {\n        if (!this.source) return \"\";\n        let css = this.source;\n        if (color == null) color = pico.isColorSupported;\n        if (terminalHighlight) {\n            if (color) css = terminalHighlight(css);\n        }\n        let lines = css.split(/\\r?\\n/);\n        let start = Math.max(this.line - 3, 0);\n        let end = Math.min(this.line + 2, lines.length);\n        let maxWidth = String(end).length;\n        let mark, aside;\n        if (color) {\n            let { bold, gray, red } = pico.createColors(true);\n            mark = (text)=>bold(red(text));\n            aside = (text)=>gray(text);\n        } else {\n            mark = aside = (str)=>str;\n        }\n        return lines.slice(start, end).map((line, index)=>{\n            let number = start + 1 + index;\n            let gutter = \" \" + (\" \" + number).slice(-maxWidth) + \" | \";\n            if (number === this.line) {\n                let spacing = aside(gutter.replace(/\\d/g, \" \")) + line.slice(0, this.column - 1).replace(/[^\\t]/g, \" \");\n                return mark(\">\") + aside(gutter) + line + \"\\n \" + spacing + mark(\"^\");\n            }\n            return \" \" + aside(gutter) + line;\n        }).join(\"\\n\");\n    }\n    toString() {\n        let code = this.showSourceCode();\n        if (code) {\n            code = \"\\n\\n\" + code + \"\\n\";\n        }\n        return this.name + \": \" + this.message + code;\n    }\n}\nmodule.exports = CssSyntaxError;\nCssSyntaxError.default = CssSyntaxError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY3NzLXN5bnRheC1lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLElBQUlDLG9CQUFvQkQsbUJBQU9BLENBQUM7QUFFaEMsTUFBTUUsdUJBQXVCQztJQUMzQkMsWUFBWUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sQ0FBRTtRQUN2RCxLQUFLLENBQUNMO1FBQ04sSUFBSSxDQUFDTSxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLE1BQU0sR0FBR1A7UUFFZCxJQUFJSSxNQUFNO1lBQ1IsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO1FBQ2Q7UUFDQSxJQUFJRCxRQUFRO1lBQ1YsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO1FBQ2hCO1FBQ0EsSUFBSUUsUUFBUTtZQUNWLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtRQUNoQjtRQUNBLElBQUksT0FBT0osU0FBUyxlQUFlLE9BQU9DLFdBQVcsYUFBYTtZQUNoRSxJQUFJLE9BQU9ELFNBQVMsVUFBVTtnQkFDNUIsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO2dCQUNaLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtZQUNoQixPQUFPO2dCQUNMLElBQUksQ0FBQ0QsSUFBSSxHQUFHQSxLQUFLQSxJQUFJO2dCQUNyQixJQUFJLENBQUNDLE1BQU0sR0FBR0QsS0FBS0MsTUFBTTtnQkFDekIsSUFBSSxDQUFDTSxPQUFPLEdBQUdOLE9BQU9ELElBQUk7Z0JBQzFCLElBQUksQ0FBQ1EsU0FBUyxHQUFHUCxPQUFPQSxNQUFNO1lBQ2hDO1FBQ0Y7UUFFQSxJQUFJLENBQUNRLFVBQVU7UUFFZixJQUFJWixNQUFNYSxpQkFBaUIsRUFBRTtZQUMzQmIsTUFBTWEsaUJBQWlCLENBQUMsSUFBSSxFQUFFZDtRQUNoQztJQUNGO0lBRUFhLGFBQWE7UUFDWCxJQUFJLENBQUNWLE9BQU8sR0FBRyxJQUFJLENBQUNLLE1BQU0sR0FBRyxJQUFJLENBQUNBLE1BQU0sR0FBRyxPQUFPO1FBQ2xELElBQUksQ0FBQ0wsT0FBTyxJQUFJLElBQUksQ0FBQ0ksSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSSxHQUFHO1FBQ3hDLElBQUksT0FBTyxJQUFJLENBQUNILElBQUksS0FBSyxhQUFhO1lBQ3BDLElBQUksQ0FBQ0QsT0FBTyxJQUFJLE1BQU0sSUFBSSxDQUFDQyxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUNDLE1BQU07UUFDckQ7UUFDQSxJQUFJLENBQUNGLE9BQU8sSUFBSSxPQUFPLElBQUksQ0FBQ08sTUFBTTtJQUNwQztJQUVBSyxlQUFlQyxLQUFLLEVBQUU7UUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQ1YsTUFBTSxFQUFFLE9BQU87UUFFekIsSUFBSVcsTUFBTSxJQUFJLENBQUNYLE1BQU07UUFDckIsSUFBSVUsU0FBUyxNQUFNQSxRQUFRbkIsS0FBS3FCLGdCQUFnQjtRQUNoRCxJQUFJbkIsbUJBQW1CO1lBQ3JCLElBQUlpQixPQUFPQyxNQUFNbEIsa0JBQWtCa0I7UUFDckM7UUFFQSxJQUFJRSxRQUFRRixJQUFJRyxLQUFLLENBQUM7UUFDdEIsSUFBSUMsUUFBUUMsS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ25CLElBQUksR0FBRyxHQUFHO1FBQ3BDLElBQUlvQixNQUFNRixLQUFLRyxHQUFHLENBQUMsSUFBSSxDQUFDckIsSUFBSSxHQUFHLEdBQUdlLE1BQU1PLE1BQU07UUFFOUMsSUFBSUMsV0FBV0MsT0FBT0osS0FBS0UsTUFBTTtRQUVqQyxJQUFJRyxNQUFNQztRQUNWLElBQUlkLE9BQU87WUFDVCxJQUFJLEVBQUVlLElBQUksRUFBRUMsSUFBSSxFQUFFQyxHQUFHLEVBQUUsR0FBR3BDLEtBQUtxQyxZQUFZLENBQUM7WUFDNUNMLE9BQU9NLENBQUFBLE9BQVFKLEtBQUtFLElBQUlFO1lBQ3hCTCxRQUFRSyxDQUFBQSxPQUFRSCxLQUFLRztRQUN2QixPQUFPO1lBQ0xOLE9BQU9DLFFBQVFNLENBQUFBLE1BQU9BO1FBQ3hCO1FBRUEsT0FBT2pCLE1BQ0prQixLQUFLLENBQUNoQixPQUFPRyxLQUNiYyxHQUFHLENBQUMsQ0FBQ2xDLE1BQU1tQztZQUNWLElBQUlDLFNBQVNuQixRQUFRLElBQUlrQjtZQUN6QixJQUFJRSxTQUFTLE1BQU0sQ0FBQyxNQUFNRCxNQUFLLEVBQUdILEtBQUssQ0FBQyxDQUFDVixZQUFZO1lBQ3JELElBQUlhLFdBQVcsSUFBSSxDQUFDcEMsSUFBSSxFQUFFO2dCQUN4QixJQUFJc0MsVUFDRlosTUFBTVcsT0FBT0UsT0FBTyxDQUFDLE9BQU8sUUFDNUJ2QyxLQUFLaUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDaEMsTUFBTSxHQUFHLEdBQUdzQyxPQUFPLENBQUMsVUFBVTtnQkFDbkQsT0FBT2QsS0FBSyxPQUFPQyxNQUFNVyxVQUFVckMsT0FBTyxRQUFRc0MsVUFBVWIsS0FBSztZQUNuRTtZQUNBLE9BQU8sTUFBTUMsTUFBTVcsVUFBVXJDO1FBQy9CLEdBQ0N3QyxJQUFJLENBQUM7SUFDVjtJQUVBQyxXQUFXO1FBQ1QsSUFBSUMsT0FBTyxJQUFJLENBQUMvQixjQUFjO1FBQzlCLElBQUkrQixNQUFNO1lBQ1JBLE9BQU8sU0FBU0EsT0FBTztRQUN6QjtRQUNBLE9BQU8sSUFBSSxDQUFDckMsSUFBSSxHQUFHLE9BQU8sSUFBSSxDQUFDTixPQUFPLEdBQUcyQztJQUMzQztBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR2hEO0FBQ2pCQSxlQUFlaUQsT0FBTyxHQUFHakQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY3NzLXN5bnRheC1lcnJvci5qcz8xMTc2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgcGljbyA9IHJlcXVpcmUoJ3BpY29jb2xvcnMnKVxuXG5sZXQgdGVybWluYWxIaWdobGlnaHQgPSByZXF1aXJlKCcuL3Rlcm1pbmFsLWhpZ2hsaWdodCcpXG5cbmNsYXNzIENzc1N5bnRheEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBsaW5lLCBjb2x1bW4sIHNvdXJjZSwgZmlsZSwgcGx1Z2luKSB7XG4gICAgc3VwZXIobWVzc2FnZSlcbiAgICB0aGlzLm5hbWUgPSAnQ3NzU3ludGF4RXJyb3InXG4gICAgdGhpcy5yZWFzb24gPSBtZXNzYWdlXG5cbiAgICBpZiAoZmlsZSkge1xuICAgICAgdGhpcy5maWxlID0gZmlsZVxuICAgIH1cbiAgICBpZiAoc291cmNlKSB7XG4gICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZVxuICAgIH1cbiAgICBpZiAocGx1Z2luKSB7XG4gICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpblxuICAgIH1cbiAgICBpZiAodHlwZW9mIGxpbmUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb2x1bW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHlwZW9mIGxpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRoaXMubGluZSA9IGxpbmVcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGluZSA9IGxpbmUubGluZVxuICAgICAgICB0aGlzLmNvbHVtbiA9IGxpbmUuY29sdW1uXG4gICAgICAgIHRoaXMuZW5kTGluZSA9IGNvbHVtbi5saW5lXG4gICAgICAgIHRoaXMuZW5kQ29sdW1uID0gY29sdW1uLmNvbHVtblxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0TWVzc2FnZSgpXG5cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIENzc1N5bnRheEVycm9yKVxuICAgIH1cbiAgfVxuXG4gIHNldE1lc3NhZ2UoKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy5wbHVnaW4gPyB0aGlzLnBsdWdpbiArICc6ICcgOiAnJ1xuICAgIHRoaXMubWVzc2FnZSArPSB0aGlzLmZpbGUgPyB0aGlzLmZpbGUgOiAnPGNzcyBpbnB1dD4nXG4gICAgaWYgKHR5cGVvZiB0aGlzLmxpbmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgKz0gJzonICsgdGhpcy5saW5lICsgJzonICsgdGhpcy5jb2x1bW5cbiAgICB9XG4gICAgdGhpcy5tZXNzYWdlICs9ICc6ICcgKyB0aGlzLnJlYXNvblxuICB9XG5cbiAgc2hvd1NvdXJjZUNvZGUoY29sb3IpIHtcbiAgICBpZiAoIXRoaXMuc291cmNlKSByZXR1cm4gJydcblxuICAgIGxldCBjc3MgPSB0aGlzLnNvdXJjZVxuICAgIGlmIChjb2xvciA9PSBudWxsKSBjb2xvciA9IHBpY28uaXNDb2xvclN1cHBvcnRlZFxuICAgIGlmICh0ZXJtaW5hbEhpZ2hsaWdodCkge1xuICAgICAgaWYgKGNvbG9yKSBjc3MgPSB0ZXJtaW5hbEhpZ2hsaWdodChjc3MpXG4gICAgfVxuXG4gICAgbGV0IGxpbmVzID0gY3NzLnNwbGl0KC9cXHI/XFxuLylcbiAgICBsZXQgc3RhcnQgPSBNYXRoLm1heCh0aGlzLmxpbmUgLSAzLCAwKVxuICAgIGxldCBlbmQgPSBNYXRoLm1pbih0aGlzLmxpbmUgKyAyLCBsaW5lcy5sZW5ndGgpXG5cbiAgICBsZXQgbWF4V2lkdGggPSBTdHJpbmcoZW5kKS5sZW5ndGhcblxuICAgIGxldCBtYXJrLCBhc2lkZVxuICAgIGlmIChjb2xvcikge1xuICAgICAgbGV0IHsgYm9sZCwgZ3JheSwgcmVkIH0gPSBwaWNvLmNyZWF0ZUNvbG9ycyh0cnVlKVxuICAgICAgbWFyayA9IHRleHQgPT4gYm9sZChyZWQodGV4dCkpXG4gICAgICBhc2lkZSA9IHRleHQgPT4gZ3JheSh0ZXh0KVxuICAgIH0gZWxzZSB7XG4gICAgICBtYXJrID0gYXNpZGUgPSBzdHIgPT4gc3RyXG4gICAgfVxuXG4gICAgcmV0dXJuIGxpbmVzXG4gICAgICAuc2xpY2Uoc3RhcnQsIGVuZClcbiAgICAgIC5tYXAoKGxpbmUsIGluZGV4KSA9PiB7XG4gICAgICAgIGxldCBudW1iZXIgPSBzdGFydCArIDEgKyBpbmRleFxuICAgICAgICBsZXQgZ3V0dGVyID0gJyAnICsgKCcgJyArIG51bWJlcikuc2xpY2UoLW1heFdpZHRoKSArICcgfCAnXG4gICAgICAgIGlmIChudW1iZXIgPT09IHRoaXMubGluZSkge1xuICAgICAgICAgIGxldCBzcGFjaW5nID1cbiAgICAgICAgICAgIGFzaWRlKGd1dHRlci5yZXBsYWNlKC9cXGQvZywgJyAnKSkgK1xuICAgICAgICAgICAgbGluZS5zbGljZSgwLCB0aGlzLmNvbHVtbiAtIDEpLnJlcGxhY2UoL1teXFx0XS9nLCAnICcpXG4gICAgICAgICAgcmV0dXJuIG1hcmsoJz4nKSArIGFzaWRlKGd1dHRlcikgKyBsaW5lICsgJ1xcbiAnICsgc3BhY2luZyArIG1hcmsoJ14nKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnICcgKyBhc2lkZShndXR0ZXIpICsgbGluZVxuICAgICAgfSlcbiAgICAgIC5qb2luKCdcXG4nKVxuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IGNvZGUgPSB0aGlzLnNob3dTb3VyY2VDb2RlKClcbiAgICBpZiAoY29kZSkge1xuICAgICAgY29kZSA9ICdcXG5cXG4nICsgY29kZSArICdcXG4nXG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5hbWUgKyAnOiAnICsgdGhpcy5tZXNzYWdlICsgY29kZVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ3NzU3ludGF4RXJyb3JcbkNzc1N5bnRheEVycm9yLmRlZmF1bHQgPSBDc3NTeW50YXhFcnJvclxuIl0sIm5hbWVzIjpbInBpY28iLCJyZXF1aXJlIiwidGVybWluYWxIaWdobGlnaHQiLCJDc3NTeW50YXhFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwibGluZSIsImNvbHVtbiIsInNvdXJjZSIsImZpbGUiLCJwbHVnaW4iLCJuYW1lIiwicmVhc29uIiwiZW5kTGluZSIsImVuZENvbHVtbiIsInNldE1lc3NhZ2UiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInNob3dTb3VyY2VDb2RlIiwiY29sb3IiLCJjc3MiLCJpc0NvbG9yU3VwcG9ydGVkIiwibGluZXMiLCJzcGxpdCIsInN0YXJ0IiwiTWF0aCIsIm1heCIsImVuZCIsIm1pbiIsImxlbmd0aCIsIm1heFdpZHRoIiwiU3RyaW5nIiwibWFyayIsImFzaWRlIiwiYm9sZCIsImdyYXkiLCJyZWQiLCJjcmVhdGVDb2xvcnMiLCJ0ZXh0Iiwic3RyIiwic2xpY2UiLCJtYXAiLCJpbmRleCIsIm51bWJlciIsImd1dHRlciIsInNwYWNpbmciLCJyZXBsYWNlIiwiam9pbiIsInRvU3RyaW5nIiwiY29kZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/css-syntax-error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/node.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/node.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { isClean, my } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/postcss/lib/symbols.js\");\nlet CssSyntaxError = __webpack_require__(/*! ./css-syntax-error */ \"(ssr)/./node_modules/postcss/lib/css-syntax-error.js\");\nlet Stringifier = __webpack_require__(/*! ./stringifier */ \"(ssr)/./node_modules/postcss/lib/stringifier.js\");\nlet stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/postcss/lib/stringify.js\");\nfunction cloneNode(obj, parent) {\n    let cloned = new obj.constructor();\n    for(let i in obj){\n        if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n            continue;\n        }\n        if (i === \"proxyCache\") continue;\n        let value = obj[i];\n        let type = typeof value;\n        if (i === \"parent\" && type === \"object\") {\n            if (parent) cloned[i] = parent;\n        } else if (i === \"source\") {\n            cloned[i] = value;\n        } else if (Array.isArray(value)) {\n            cloned[i] = value.map((j)=>cloneNode(j, cloned));\n        } else {\n            if (type === \"object\" && value !== null) value = cloneNode(value);\n            cloned[i] = value;\n        }\n    }\n    return cloned;\n}\nclass Node {\n    constructor(defaults = {}){\n        this.raws = {};\n        this[isClean] = false;\n        this[my] = true;\n        for(let name in defaults){\n            if (name === \"nodes\") {\n                this.nodes = [];\n                for (let node of defaults[name]){\n                    if (typeof node.clone === \"function\") {\n                        this.append(node.clone());\n                    } else {\n                        this.append(node);\n                    }\n                }\n            } else {\n                this[name] = defaults[name];\n            }\n        }\n    }\n    addToError(error) {\n        error.postcssNode = this;\n        if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n            let s = this.source;\n            error.stack = error.stack.replace(/\\n\\s{4}at /, `$&${s.input.from}:${s.start.line}:${s.start.column}$&`);\n        }\n        return error;\n    }\n    after(add) {\n        this.parent.insertAfter(this, add);\n        return this;\n    }\n    assign(overrides = {}) {\n        for(let name in overrides){\n            this[name] = overrides[name];\n        }\n        return this;\n    }\n    before(add) {\n        this.parent.insertBefore(this, add);\n        return this;\n    }\n    cleanRaws(keepBetween) {\n        delete this.raws.before;\n        delete this.raws.after;\n        if (!keepBetween) delete this.raws.between;\n    }\n    clone(overrides = {}) {\n        let cloned = cloneNode(this);\n        for(let name in overrides){\n            cloned[name] = overrides[name];\n        }\n        return cloned;\n    }\n    cloneAfter(overrides = {}) {\n        let cloned = this.clone(overrides);\n        this.parent.insertAfter(this, cloned);\n        return cloned;\n    }\n    cloneBefore(overrides = {}) {\n        let cloned = this.clone(overrides);\n        this.parent.insertBefore(this, cloned);\n        return cloned;\n    }\n    error(message, opts = {}) {\n        if (this.source) {\n            let { end, start } = this.rangeBy(opts);\n            return this.source.input.error(message, {\n                column: start.column,\n                line: start.line\n            }, {\n                column: end.column,\n                line: end.line\n            }, opts);\n        }\n        return new CssSyntaxError(message);\n    }\n    getProxyProcessor() {\n        return {\n            get (node, prop) {\n                if (prop === \"proxyOf\") {\n                    return node;\n                } else if (prop === \"root\") {\n                    return ()=>node.root().toProxy();\n                } else {\n                    return node[prop];\n                }\n            },\n            set (node, prop, value) {\n                if (node[prop] === value) return true;\n                node[prop] = value;\n                if (prop === \"prop\" || prop === \"value\" || prop === \"name\" || prop === \"params\" || prop === \"important\" || /* c8 ignore next */ prop === \"text\") {\n                    node.markDirty();\n                }\n                return true;\n            }\n        };\n    }\n    markDirty() {\n        if (this[isClean]) {\n            this[isClean] = false;\n            let next = this;\n            while(next = next.parent){\n                next[isClean] = false;\n            }\n        }\n    }\n    next() {\n        if (!this.parent) return undefined;\n        let index = this.parent.index(this);\n        return this.parent.nodes[index + 1];\n    }\n    positionBy(opts, stringRepresentation) {\n        let pos = this.source.start;\n        if (opts.index) {\n            pos = this.positionInside(opts.index, stringRepresentation);\n        } else if (opts.word) {\n            stringRepresentation = this.toString();\n            let index = stringRepresentation.indexOf(opts.word);\n            if (index !== -1) pos = this.positionInside(index, stringRepresentation);\n        }\n        return pos;\n    }\n    positionInside(index, stringRepresentation) {\n        let string = stringRepresentation || this.toString();\n        let column = this.source.start.column;\n        let line = this.source.start.line;\n        for(let i = 0; i < index; i++){\n            if (string[i] === \"\\n\") {\n                column = 1;\n                line += 1;\n            } else {\n                column += 1;\n            }\n        }\n        return {\n            column,\n            line\n        };\n    }\n    prev() {\n        if (!this.parent) return undefined;\n        let index = this.parent.index(this);\n        return this.parent.nodes[index - 1];\n    }\n    rangeBy(opts) {\n        let start = {\n            column: this.source.start.column,\n            line: this.source.start.line\n        };\n        let end = this.source.end ? {\n            column: this.source.end.column + 1,\n            line: this.source.end.line\n        } : {\n            column: start.column + 1,\n            line: start.line\n        };\n        if (opts.word) {\n            let stringRepresentation = this.toString();\n            let index = stringRepresentation.indexOf(opts.word);\n            if (index !== -1) {\n                start = this.positionInside(index, stringRepresentation);\n                end = this.positionInside(index + opts.word.length, stringRepresentation);\n            }\n        } else {\n            if (opts.start) {\n                start = {\n                    column: opts.start.column,\n                    line: opts.start.line\n                };\n            } else if (opts.index) {\n                start = this.positionInside(opts.index);\n            }\n            if (opts.end) {\n                end = {\n                    column: opts.end.column,\n                    line: opts.end.line\n                };\n            } else if (opts.endIndex) {\n                end = this.positionInside(opts.endIndex);\n            } else if (opts.index) {\n                end = this.positionInside(opts.index + 1);\n            }\n        }\n        if (end.line < start.line || end.line === start.line && end.column <= start.column) {\n            end = {\n                column: start.column + 1,\n                line: start.line\n            };\n        }\n        return {\n            end,\n            start\n        };\n    }\n    raw(prop, defaultType) {\n        let str = new Stringifier();\n        return str.raw(this, prop, defaultType);\n    }\n    remove() {\n        if (this.parent) {\n            this.parent.removeChild(this);\n        }\n        this.parent = undefined;\n        return this;\n    }\n    replaceWith(...nodes) {\n        if (this.parent) {\n            let bookmark = this;\n            let foundSelf = false;\n            for (let node of nodes){\n                if (node === this) {\n                    foundSelf = true;\n                } else if (foundSelf) {\n                    this.parent.insertAfter(bookmark, node);\n                    bookmark = node;\n                } else {\n                    this.parent.insertBefore(bookmark, node);\n                }\n            }\n            if (!foundSelf) {\n                this.remove();\n            }\n        }\n        return this;\n    }\n    root() {\n        let result = this;\n        while(result.parent && result.parent.type !== \"document\"){\n            result = result.parent;\n        }\n        return result;\n    }\n    toJSON(_, inputs) {\n        let fixed = {};\n        let emitInputs = inputs == null;\n        inputs = inputs || new Map();\n        let inputsNextIndex = 0;\n        for(let name in this){\n            if (!Object.prototype.hasOwnProperty.call(this, name)) {\n                continue;\n            }\n            if (name === \"parent\" || name === \"proxyCache\") continue;\n            let value = this[name];\n            if (Array.isArray(value)) {\n                fixed[name] = value.map((i)=>{\n                    if (typeof i === \"object\" && i.toJSON) {\n                        return i.toJSON(null, inputs);\n                    } else {\n                        return i;\n                    }\n                });\n            } else if (typeof value === \"object\" && value.toJSON) {\n                fixed[name] = value.toJSON(null, inputs);\n            } else if (name === \"source\") {\n                let inputId = inputs.get(value.input);\n                if (inputId == null) {\n                    inputId = inputsNextIndex;\n                    inputs.set(value.input, inputsNextIndex);\n                    inputsNextIndex++;\n                }\n                fixed[name] = {\n                    end: value.end,\n                    inputId,\n                    start: value.start\n                };\n            } else {\n                fixed[name] = value;\n            }\n        }\n        if (emitInputs) {\n            fixed.inputs = [\n                ...inputs.keys()\n            ].map((input)=>input.toJSON());\n        }\n        return fixed;\n    }\n    toProxy() {\n        if (!this.proxyCache) {\n            this.proxyCache = new Proxy(this, this.getProxyProcessor());\n        }\n        return this.proxyCache;\n    }\n    toString(stringifier = stringify) {\n        if (stringifier.stringify) stringifier = stringifier.stringify;\n        let result = \"\";\n        stringifier(this, (i)=>{\n            result += i;\n        });\n        return result;\n    }\n    warn(result, text, opts) {\n        let data = {\n            node: this\n        };\n        for(let i in opts)data[i] = opts[i];\n        return result.warn(text, data);\n    }\n    get proxyOf() {\n        return this;\n    }\n}\nmodule.exports = Node;\nNode.default = Node;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/stringifier.js":
/*!*************************************************!*\
  !*** ./node_modules/postcss/lib/stringifier.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nconst DEFAULT_RAW = {\n    after: \"\\n\",\n    beforeClose: \"\\n\",\n    beforeComment: \"\\n\",\n    beforeDecl: \"\\n\",\n    beforeOpen: \" \",\n    beforeRule: \"\\n\",\n    colon: \": \",\n    commentLeft: \" \",\n    commentRight: \" \",\n    emptyBody: \"\",\n    indent: \"    \",\n    semicolon: false\n};\nfunction capitalize(str) {\n    return str[0].toUpperCase() + str.slice(1);\n}\nclass Stringifier {\n    constructor(builder){\n        this.builder = builder;\n    }\n    atrule(node, semicolon) {\n        let name = \"@\" + node.name;\n        let params = node.params ? this.rawValue(node, \"params\") : \"\";\n        if (typeof node.raws.afterName !== \"undefined\") {\n            name += node.raws.afterName;\n        } else if (params) {\n            name += \" \";\n        }\n        if (node.nodes) {\n            this.block(node, name + params);\n        } else {\n            let end = (node.raws.between || \"\") + (semicolon ? \";\" : \"\");\n            this.builder(name + params + end, node);\n        }\n    }\n    beforeAfter(node, detect) {\n        let value;\n        if (node.type === \"decl\") {\n            value = this.raw(node, null, \"beforeDecl\");\n        } else if (node.type === \"comment\") {\n            value = this.raw(node, null, \"beforeComment\");\n        } else if (detect === \"before\") {\n            value = this.raw(node, null, \"beforeRule\");\n        } else {\n            value = this.raw(node, null, \"beforeClose\");\n        }\n        let buf = node.parent;\n        let depth = 0;\n        while(buf && buf.type !== \"root\"){\n            depth += 1;\n            buf = buf.parent;\n        }\n        if (value.includes(\"\\n\")) {\n            let indent = this.raw(node, null, \"indent\");\n            if (indent.length) {\n                for(let step = 0; step < depth; step++)value += indent;\n            }\n        }\n        return value;\n    }\n    block(node, start) {\n        let between = this.raw(node, \"between\", \"beforeOpen\");\n        this.builder(start + between + \"{\", node, \"start\");\n        let after;\n        if (node.nodes && node.nodes.length) {\n            this.body(node);\n            after = this.raw(node, \"after\");\n        } else {\n            after = this.raw(node, \"after\", \"emptyBody\");\n        }\n        if (after) this.builder(after);\n        this.builder(\"}\", node, \"end\");\n    }\n    body(node) {\n        let last = node.nodes.length - 1;\n        while(last > 0){\n            if (node.nodes[last].type !== \"comment\") break;\n            last -= 1;\n        }\n        let semicolon = this.raw(node, \"semicolon\");\n        for(let i = 0; i < node.nodes.length; i++){\n            let child = node.nodes[i];\n            let before = this.raw(child, \"before\");\n            if (before) this.builder(before);\n            this.stringify(child, last !== i || semicolon);\n        }\n    }\n    comment(node) {\n        let left = this.raw(node, \"left\", \"commentLeft\");\n        let right = this.raw(node, \"right\", \"commentRight\");\n        this.builder(\"/*\" + left + node.text + right + \"*/\", node);\n    }\n    decl(node, semicolon) {\n        let between = this.raw(node, \"between\", \"colon\");\n        let string = node.prop + between + this.rawValue(node, \"value\");\n        if (node.important) {\n            string += node.raws.important || \" !important\";\n        }\n        if (semicolon) string += \";\";\n        this.builder(string, node);\n    }\n    document(node) {\n        this.body(node);\n    }\n    raw(node, own, detect) {\n        let value;\n        if (!detect) detect = own;\n        // Already had\n        if (own) {\n            value = node.raws[own];\n            if (typeof value !== \"undefined\") return value;\n        }\n        let parent = node.parent;\n        if (detect === \"before\") {\n            // Hack for first rule in CSS\n            if (!parent || parent.type === \"root\" && parent.first === node) {\n                return \"\";\n            }\n            // `root` nodes in `document` should use only their own raws\n            if (parent && parent.type === \"document\") {\n                return \"\";\n            }\n        }\n        // Floating child without parent\n        if (!parent) return DEFAULT_RAW[detect];\n        // Detect style by other nodes\n        let root = node.root();\n        if (!root.rawCache) root.rawCache = {};\n        if (typeof root.rawCache[detect] !== \"undefined\") {\n            return root.rawCache[detect];\n        }\n        if (detect === \"before\" || detect === \"after\") {\n            return this.beforeAfter(node, detect);\n        } else {\n            let method = \"raw\" + capitalize(detect);\n            if (this[method]) {\n                value = this[method](root, node);\n            } else {\n                root.walk((i)=>{\n                    value = i.raws[own];\n                    if (typeof value !== \"undefined\") return false;\n                });\n            }\n        }\n        if (typeof value === \"undefined\") value = DEFAULT_RAW[detect];\n        root.rawCache[detect] = value;\n        return value;\n    }\n    rawBeforeClose(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.nodes && i.nodes.length > 0) {\n                if (typeof i.raws.after !== \"undefined\") {\n                    value = i.raws.after;\n                    if (value.includes(\"\\n\")) {\n                        value = value.replace(/[^\\n]+$/, \"\");\n                    }\n                    return false;\n                }\n            }\n        });\n        if (value) value = value.replace(/\\S/g, \"\");\n        return value;\n    }\n    rawBeforeComment(root, node) {\n        let value;\n        root.walkComments((i)=>{\n            if (typeof i.raws.before !== \"undefined\") {\n                value = i.raws.before;\n                if (value.includes(\"\\n\")) {\n                    value = value.replace(/[^\\n]+$/, \"\");\n                }\n                return false;\n            }\n        });\n        if (typeof value === \"undefined\") {\n            value = this.raw(node, null, \"beforeDecl\");\n        } else if (value) {\n            value = value.replace(/\\S/g, \"\");\n        }\n        return value;\n    }\n    rawBeforeDecl(root, node) {\n        let value;\n        root.walkDecls((i)=>{\n            if (typeof i.raws.before !== \"undefined\") {\n                value = i.raws.before;\n                if (value.includes(\"\\n\")) {\n                    value = value.replace(/[^\\n]+$/, \"\");\n                }\n                return false;\n            }\n        });\n        if (typeof value === \"undefined\") {\n            value = this.raw(node, null, \"beforeRule\");\n        } else if (value) {\n            value = value.replace(/\\S/g, \"\");\n        }\n        return value;\n    }\n    rawBeforeOpen(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.type !== \"decl\") {\n                value = i.raws.between;\n                if (typeof value !== \"undefined\") return false;\n            }\n        });\n        return value;\n    }\n    rawBeforeRule(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.nodes && (i.parent !== root || root.first !== i)) {\n                if (typeof i.raws.before !== \"undefined\") {\n                    value = i.raws.before;\n                    if (value.includes(\"\\n\")) {\n                        value = value.replace(/[^\\n]+$/, \"\");\n                    }\n                    return false;\n                }\n            }\n        });\n        if (value) value = value.replace(/\\S/g, \"\");\n        return value;\n    }\n    rawColon(root) {\n        let value;\n        root.walkDecls((i)=>{\n            if (typeof i.raws.between !== \"undefined\") {\n                value = i.raws.between.replace(/[^\\s:]/g, \"\");\n                return false;\n            }\n        });\n        return value;\n    }\n    rawEmptyBody(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.nodes && i.nodes.length === 0) {\n                value = i.raws.after;\n                if (typeof value !== \"undefined\") return false;\n            }\n        });\n        return value;\n    }\n    rawIndent(root) {\n        if (root.raws.indent) return root.raws.indent;\n        let value;\n        root.walk((i)=>{\n            let p = i.parent;\n            if (p && p !== root && p.parent && p.parent === root) {\n                if (typeof i.raws.before !== \"undefined\") {\n                    let parts = i.raws.before.split(\"\\n\");\n                    value = parts[parts.length - 1];\n                    value = value.replace(/\\S/g, \"\");\n                    return false;\n                }\n            }\n        });\n        return value;\n    }\n    rawSemicolon(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.nodes && i.nodes.length && i.last.type === \"decl\") {\n                value = i.raws.semicolon;\n                if (typeof value !== \"undefined\") return false;\n            }\n        });\n        return value;\n    }\n    rawValue(node, prop) {\n        let value = node[prop];\n        let raw = node.raws[prop];\n        if (raw && raw.value === value) {\n            return raw.raw;\n        }\n        return value;\n    }\n    root(node) {\n        this.body(node);\n        if (node.raws.after) this.builder(node.raws.after);\n    }\n    rule(node) {\n        this.block(node, this.rawValue(node, \"selector\"));\n        if (node.raws.ownSemicolon) {\n            this.builder(node.raws.ownSemicolon, node, \"end\");\n        }\n    }\n    stringify(node, semicolon) {\n        /* c8 ignore start */ if (!this[node.type]) {\n            throw new Error(\"Unknown AST node type \" + node.type + \". \" + \"Maybe you need to change PostCSS stringifier.\");\n        }\n        /* c8 ignore stop */ this[node.type](node, semicolon);\n    }\n}\nmodule.exports = Stringifier;\nStringifier.default = Stringifier;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/stringifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/stringify.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/stringify.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Stringifier = __webpack_require__(/*! ./stringifier */ \"(ssr)/./node_modules/postcss/lib/stringifier.js\");\nfunction stringify(node, builder) {\n    let str = new Stringifier(builder);\n    str.stringify(node);\n}\nmodule.exports = stringify;\nstringify.default = stringify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUM7QUFFMUIsU0FBU0MsVUFBVUMsSUFBSSxFQUFFQyxPQUFPO0lBQzlCLElBQUlDLE1BQU0sSUFBSUwsWUFBWUk7SUFDMUJDLElBQUlILFNBQVMsQ0FBQ0M7QUFDaEI7QUFFQUcsT0FBT0MsT0FBTyxHQUFHTDtBQUNqQkEsVUFBVU0sT0FBTyxHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9zdHJpbmdpZnkuanM/ZDdjMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IFN0cmluZ2lmaWVyID0gcmVxdWlyZSgnLi9zdHJpbmdpZmllcicpXG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShub2RlLCBidWlsZGVyKSB7XG4gIGxldCBzdHIgPSBuZXcgU3RyaW5naWZpZXIoYnVpbGRlcilcbiAgc3RyLnN0cmluZ2lmeShub2RlKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeVxuc3RyaW5naWZ5LmRlZmF1bHQgPSBzdHJpbmdpZnlcbiJdLCJuYW1lcyI6WyJTdHJpbmdpZmllciIsInJlcXVpcmUiLCJzdHJpbmdpZnkiLCJub2RlIiwiYnVpbGRlciIsInN0ciIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/symbols.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/symbols.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nmodule.exports.isClean = Symbol(\"isClean\");\nmodule.exports.my = Symbol(\"my\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxzQkFBc0IsR0FBR0csT0FBTztBQUVoQ0gsaUJBQWlCLEdBQUdHLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvc3ltYm9scy5qcz9iMGNiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cy5pc0NsZWFuID0gU3ltYm9sKCdpc0NsZWFuJylcblxubW9kdWxlLmV4cG9ydHMubXkgPSBTeW1ib2woJ215JylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaXNDbGVhbiIsIlN5bWJvbCIsIm15Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/terminal-highlight.js":
/*!********************************************************!*\
  !*** ./node_modules/postcss/lib/terminal-highlight.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet pico = __webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\");\nlet tokenizer = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/postcss/lib/tokenize.js\");\nlet Input;\nfunction registerInput(dependant) {\n    Input = dependant;\n}\nconst HIGHLIGHT_THEME = {\n    \";\": pico.yellow,\n    \":\": pico.yellow,\n    \"(\": pico.cyan,\n    \")\": pico.cyan,\n    \"[\": pico.yellow,\n    \"]\": pico.yellow,\n    \"{\": pico.yellow,\n    \"}\": pico.yellow,\n    \"at-word\": pico.cyan,\n    \"brackets\": pico.cyan,\n    \"call\": pico.cyan,\n    \"class\": pico.yellow,\n    \"comment\": pico.gray,\n    \"hash\": pico.magenta,\n    \"string\": pico.green\n};\nfunction getTokenType([type, value], processor) {\n    if (type === \"word\") {\n        if (value[0] === \".\") {\n            return \"class\";\n        }\n        if (value[0] === \"#\") {\n            return \"hash\";\n        }\n    }\n    if (!processor.endOfFile()) {\n        let next = processor.nextToken();\n        processor.back(next);\n        if (next[0] === \"brackets\" || next[0] === \"(\") return \"call\";\n    }\n    return type;\n}\nfunction terminalHighlight(css) {\n    let processor = tokenizer(new Input(css), {\n        ignoreErrors: true\n    });\n    let result = \"\";\n    while(!processor.endOfFile()){\n        let token = processor.nextToken();\n        let color = HIGHLIGHT_THEME[getTokenType(token, processor)];\n        if (color) {\n            result += token[1].split(/\\r?\\n/).map((i)=>color(i)).join(\"\\n\");\n        } else {\n            result += token[1];\n        }\n    }\n    return result;\n}\nterminalHighlight.registerInput = registerInput;\nmodule.exports = terminalHighlight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvdGVybWluYWwtaGlnaGxpZ2h0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkIsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUM7QUFFeEIsSUFBSUU7QUFFSixTQUFTQyxjQUFjQyxTQUFTO0lBQzlCRixRQUFRRTtBQUNWO0FBRUEsTUFBTUMsa0JBQWtCO0lBQ3RCLEtBQUtOLEtBQUtPLE1BQU07SUFDaEIsS0FBS1AsS0FBS08sTUFBTTtJQUNoQixLQUFLUCxLQUFLUSxJQUFJO0lBQ2QsS0FBS1IsS0FBS1EsSUFBSTtJQUNkLEtBQUtSLEtBQUtPLE1BQU07SUFDaEIsS0FBS1AsS0FBS08sTUFBTTtJQUNoQixLQUFLUCxLQUFLTyxNQUFNO0lBQ2hCLEtBQUtQLEtBQUtPLE1BQU07SUFDaEIsV0FBV1AsS0FBS1EsSUFBSTtJQUNwQixZQUFZUixLQUFLUSxJQUFJO0lBQ3JCLFFBQVFSLEtBQUtRLElBQUk7SUFDakIsU0FBU1IsS0FBS08sTUFBTTtJQUNwQixXQUFXUCxLQUFLUyxJQUFJO0lBQ3BCLFFBQVFULEtBQUtVLE9BQU87SUFDcEIsVUFBVVYsS0FBS1csS0FBSztBQUN0QjtBQUVBLFNBQVNDLGFBQWEsQ0FBQ0MsTUFBTUMsTUFBTSxFQUFFQyxTQUFTO0lBQzVDLElBQUlGLFNBQVMsUUFBUTtRQUNuQixJQUFJQyxLQUFLLENBQUMsRUFBRSxLQUFLLEtBQUs7WUFDcEIsT0FBTztRQUNUO1FBQ0EsSUFBSUEsS0FBSyxDQUFDLEVBQUUsS0FBSyxLQUFLO1lBQ3BCLE9BQU87UUFDVDtJQUNGO0lBRUEsSUFBSSxDQUFDQyxVQUFVQyxTQUFTLElBQUk7UUFDMUIsSUFBSUMsT0FBT0YsVUFBVUcsU0FBUztRQUM5QkgsVUFBVUksSUFBSSxDQUFDRjtRQUNmLElBQUlBLElBQUksQ0FBQyxFQUFFLEtBQUssY0FBY0EsSUFBSSxDQUFDLEVBQUUsS0FBSyxLQUFLLE9BQU87SUFDeEQ7SUFFQSxPQUFPSjtBQUNUO0FBRUEsU0FBU08sa0JBQWtCQyxHQUFHO0lBQzVCLElBQUlOLFlBQVliLFVBQVUsSUFBSUMsTUFBTWtCLE1BQU07UUFBRUMsY0FBYztJQUFLO0lBQy9ELElBQUlDLFNBQVM7SUFDYixNQUFPLENBQUNSLFVBQVVDLFNBQVMsR0FBSTtRQUM3QixJQUFJUSxRQUFRVCxVQUFVRyxTQUFTO1FBQy9CLElBQUlPLFFBQVFuQixlQUFlLENBQUNNLGFBQWFZLE9BQU9ULFdBQVc7UUFDM0QsSUFBSVUsT0FBTztZQUNURixVQUFVQyxLQUFLLENBQUMsRUFBRSxDQUNmRSxLQUFLLENBQUMsU0FDTkMsR0FBRyxDQUFDQyxDQUFBQSxJQUFLSCxNQUFNRyxJQUNmQyxJQUFJLENBQUM7UUFDVixPQUFPO1lBQ0xOLFVBQVVDLEtBQUssQ0FBQyxFQUFFO1FBQ3BCO0lBQ0Y7SUFDQSxPQUFPRDtBQUNUO0FBRUFILGtCQUFrQmhCLGFBQWEsR0FBR0E7QUFFbEMwQixPQUFPQyxPQUFPLEdBQUdYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Rlcm1pbmFsLWhpZ2hsaWdodC5qcz84ZDg1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgcGljbyA9IHJlcXVpcmUoJ3BpY29jb2xvcnMnKVxuXG5sZXQgdG9rZW5pemVyID0gcmVxdWlyZSgnLi90b2tlbml6ZScpXG5cbmxldCBJbnB1dFxuXG5mdW5jdGlvbiByZWdpc3RlcklucHV0KGRlcGVuZGFudCkge1xuICBJbnB1dCA9IGRlcGVuZGFudFxufVxuXG5jb25zdCBISUdITElHSFRfVEhFTUUgPSB7XG4gICc7JzogcGljby55ZWxsb3csXG4gICc6JzogcGljby55ZWxsb3csXG4gICcoJzogcGljby5jeWFuLFxuICAnKSc6IHBpY28uY3lhbixcbiAgJ1snOiBwaWNvLnllbGxvdyxcbiAgJ10nOiBwaWNvLnllbGxvdyxcbiAgJ3snOiBwaWNvLnllbGxvdyxcbiAgJ30nOiBwaWNvLnllbGxvdyxcbiAgJ2F0LXdvcmQnOiBwaWNvLmN5YW4sXG4gICdicmFja2V0cyc6IHBpY28uY3lhbixcbiAgJ2NhbGwnOiBwaWNvLmN5YW4sXG4gICdjbGFzcyc6IHBpY28ueWVsbG93LFxuICAnY29tbWVudCc6IHBpY28uZ3JheSxcbiAgJ2hhc2gnOiBwaWNvLm1hZ2VudGEsXG4gICdzdHJpbmcnOiBwaWNvLmdyZWVuXG59XG5cbmZ1bmN0aW9uIGdldFRva2VuVHlwZShbdHlwZSwgdmFsdWVdLCBwcm9jZXNzb3IpIHtcbiAgaWYgKHR5cGUgPT09ICd3b3JkJykge1xuICAgIGlmICh2YWx1ZVswXSA9PT0gJy4nKSB7XG4gICAgICByZXR1cm4gJ2NsYXNzJ1xuICAgIH1cbiAgICBpZiAodmFsdWVbMF0gPT09ICcjJykge1xuICAgICAgcmV0dXJuICdoYXNoJ1xuICAgIH1cbiAgfVxuXG4gIGlmICghcHJvY2Vzc29yLmVuZE9mRmlsZSgpKSB7XG4gICAgbGV0IG5leHQgPSBwcm9jZXNzb3IubmV4dFRva2VuKClcbiAgICBwcm9jZXNzb3IuYmFjayhuZXh0KVxuICAgIGlmIChuZXh0WzBdID09PSAnYnJhY2tldHMnIHx8IG5leHRbMF0gPT09ICcoJykgcmV0dXJuICdjYWxsJ1xuICB9XG5cbiAgcmV0dXJuIHR5cGVcbn1cblxuZnVuY3Rpb24gdGVybWluYWxIaWdobGlnaHQoY3NzKSB7XG4gIGxldCBwcm9jZXNzb3IgPSB0b2tlbml6ZXIobmV3IElucHV0KGNzcyksIHsgaWdub3JlRXJyb3JzOiB0cnVlIH0pXG4gIGxldCByZXN1bHQgPSAnJ1xuICB3aGlsZSAoIXByb2Nlc3Nvci5lbmRPZkZpbGUoKSkge1xuICAgIGxldCB0b2tlbiA9IHByb2Nlc3Nvci5uZXh0VG9rZW4oKVxuICAgIGxldCBjb2xvciA9IEhJR0hMSUdIVF9USEVNRVtnZXRUb2tlblR5cGUodG9rZW4sIHByb2Nlc3NvcildXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICByZXN1bHQgKz0gdG9rZW5bMV1cbiAgICAgICAgLnNwbGl0KC9cXHI/XFxuLylcbiAgICAgICAgLm1hcChpID0+IGNvbG9yKGkpKVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IHRva2VuWzFdXG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxudGVybWluYWxIaWdobGlnaHQucmVnaXN0ZXJJbnB1dCA9IHJlZ2lzdGVySW5wdXRcblxubW9kdWxlLmV4cG9ydHMgPSB0ZXJtaW5hbEhpZ2hsaWdodFxuIl0sIm5hbWVzIjpbInBpY28iLCJyZXF1aXJlIiwidG9rZW5pemVyIiwiSW5wdXQiLCJyZWdpc3RlcklucHV0IiwiZGVwZW5kYW50IiwiSElHSExJR0hUX1RIRU1FIiwieWVsbG93IiwiY3lhbiIsImdyYXkiLCJtYWdlbnRhIiwiZ3JlZW4iLCJnZXRUb2tlblR5cGUiLCJ0eXBlIiwidmFsdWUiLCJwcm9jZXNzb3IiLCJlbmRPZkZpbGUiLCJuZXh0IiwibmV4dFRva2VuIiwiYmFjayIsInRlcm1pbmFsSGlnaGxpZ2h0IiwiY3NzIiwiaWdub3JlRXJyb3JzIiwicmVzdWx0IiwidG9rZW4iLCJjb2xvciIsInNwbGl0IiwibWFwIiwiaSIsImpvaW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/terminal-highlight.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/tokenize.js":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/tokenize.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nconst SINGLE_QUOTE = \"'\".charCodeAt(0);\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0);\nconst BACKSLASH = \"\\\\\".charCodeAt(0);\nconst SLASH = \"/\".charCodeAt(0);\nconst NEWLINE = \"\\n\".charCodeAt(0);\nconst SPACE = \" \".charCodeAt(0);\nconst FEED = \"\\f\".charCodeAt(0);\nconst TAB = \"\t\".charCodeAt(0);\nconst CR = \"\\r\".charCodeAt(0);\nconst OPEN_SQUARE = \"[\".charCodeAt(0);\nconst CLOSE_SQUARE = \"]\".charCodeAt(0);\nconst OPEN_PARENTHESES = \"(\".charCodeAt(0);\nconst CLOSE_PARENTHESES = \")\".charCodeAt(0);\nconst OPEN_CURLY = \"{\".charCodeAt(0);\nconst CLOSE_CURLY = \"}\".charCodeAt(0);\nconst SEMICOLON = \";\".charCodeAt(0);\nconst ASTERISK = \"*\".charCodeAt(0);\nconst COLON = \":\".charCodeAt(0);\nconst AT = \"@\".charCodeAt(0);\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g;\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g;\nconst RE_BAD_BRACKET = /.[\\r\\n\"'(/\\\\]/;\nconst RE_HEX_ESCAPE = /[\\da-f]/i;\nmodule.exports = function tokenizer(input, options = {}) {\n    let css = input.css.valueOf();\n    let ignore = options.ignoreErrors;\n    let code, next, quote, content, escape;\n    let escaped, escapePos, prev, n, currentToken;\n    let length = css.length;\n    let pos = 0;\n    let buffer = [];\n    let returned = [];\n    function position() {\n        return pos;\n    }\n    function unclosed(what) {\n        throw input.error(\"Unclosed \" + what, pos);\n    }\n    function endOfFile() {\n        return returned.length === 0 && pos >= length;\n    }\n    function nextToken(opts) {\n        if (returned.length) return returned.pop();\n        if (pos >= length) return;\n        let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;\n        code = css.charCodeAt(pos);\n        switch(code){\n            case NEWLINE:\n            case SPACE:\n            case TAB:\n            case CR:\n            case FEED:\n                {\n                    next = pos;\n                    do {\n                        next += 1;\n                        code = css.charCodeAt(next);\n                    }while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);\n                    currentToken = [\n                        \"space\",\n                        css.slice(pos, next)\n                    ];\n                    pos = next - 1;\n                    break;\n                }\n            case OPEN_SQUARE:\n            case CLOSE_SQUARE:\n            case OPEN_CURLY:\n            case CLOSE_CURLY:\n            case COLON:\n            case SEMICOLON:\n            case CLOSE_PARENTHESES:\n                {\n                    let controlChar = String.fromCharCode(code);\n                    currentToken = [\n                        controlChar,\n                        controlChar,\n                        pos\n                    ];\n                    break;\n                }\n            case OPEN_PARENTHESES:\n                {\n                    prev = buffer.length ? buffer.pop()[1] : \"\";\n                    n = css.charCodeAt(pos + 1);\n                    if (prev === \"url\" && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {\n                        next = pos;\n                        do {\n                            escaped = false;\n                            next = css.indexOf(\")\", next + 1);\n                            if (next === -1) {\n                                if (ignore || ignoreUnclosed) {\n                                    next = pos;\n                                    break;\n                                } else {\n                                    unclosed(\"bracket\");\n                                }\n                            }\n                            escapePos = next;\n                            while(css.charCodeAt(escapePos - 1) === BACKSLASH){\n                                escapePos -= 1;\n                                escaped = !escaped;\n                            }\n                        }while (escaped);\n                        currentToken = [\n                            \"brackets\",\n                            css.slice(pos, next + 1),\n                            pos,\n                            next\n                        ];\n                        pos = next;\n                    } else {\n                        next = css.indexOf(\")\", pos + 1);\n                        content = css.slice(pos, next + 1);\n                        if (next === -1 || RE_BAD_BRACKET.test(content)) {\n                            currentToken = [\n                                \"(\",\n                                \"(\",\n                                pos\n                            ];\n                        } else {\n                            currentToken = [\n                                \"brackets\",\n                                content,\n                                pos,\n                                next\n                            ];\n                            pos = next;\n                        }\n                    }\n                    break;\n                }\n            case SINGLE_QUOTE:\n            case DOUBLE_QUOTE:\n                {\n                    quote = code === SINGLE_QUOTE ? \"'\" : '\"';\n                    next = pos;\n                    do {\n                        escaped = false;\n                        next = css.indexOf(quote, next + 1);\n                        if (next === -1) {\n                            if (ignore || ignoreUnclosed) {\n                                next = pos + 1;\n                                break;\n                            } else {\n                                unclosed(\"string\");\n                            }\n                        }\n                        escapePos = next;\n                        while(css.charCodeAt(escapePos - 1) === BACKSLASH){\n                            escapePos -= 1;\n                            escaped = !escaped;\n                        }\n                    }while (escaped);\n                    currentToken = [\n                        \"string\",\n                        css.slice(pos, next + 1),\n                        pos,\n                        next\n                    ];\n                    pos = next;\n                    break;\n                }\n            case AT:\n                {\n                    RE_AT_END.lastIndex = pos + 1;\n                    RE_AT_END.test(css);\n                    if (RE_AT_END.lastIndex === 0) {\n                        next = css.length - 1;\n                    } else {\n                        next = RE_AT_END.lastIndex - 2;\n                    }\n                    currentToken = [\n                        \"at-word\",\n                        css.slice(pos, next + 1),\n                        pos,\n                        next\n                    ];\n                    pos = next;\n                    break;\n                }\n            case BACKSLASH:\n                {\n                    next = pos;\n                    escape = true;\n                    while(css.charCodeAt(next + 1) === BACKSLASH){\n                        next += 1;\n                        escape = !escape;\n                    }\n                    code = css.charCodeAt(next + 1);\n                    if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {\n                        next += 1;\n                        if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n                            while(RE_HEX_ESCAPE.test(css.charAt(next + 1))){\n                                next += 1;\n                            }\n                            if (css.charCodeAt(next + 1) === SPACE) {\n                                next += 1;\n                            }\n                        }\n                    }\n                    currentToken = [\n                        \"word\",\n                        css.slice(pos, next + 1),\n                        pos,\n                        next\n                    ];\n                    pos = next;\n                    break;\n                }\n            default:\n                {\n                    if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n                        next = css.indexOf(\"*/\", pos + 2) + 1;\n                        if (next === 0) {\n                            if (ignore || ignoreUnclosed) {\n                                next = css.length;\n                            } else {\n                                unclosed(\"comment\");\n                            }\n                        }\n                        currentToken = [\n                            \"comment\",\n                            css.slice(pos, next + 1),\n                            pos,\n                            next\n                        ];\n                        pos = next;\n                    } else {\n                        RE_WORD_END.lastIndex = pos + 1;\n                        RE_WORD_END.test(css);\n                        if (RE_WORD_END.lastIndex === 0) {\n                            next = css.length - 1;\n                        } else {\n                            next = RE_WORD_END.lastIndex - 2;\n                        }\n                        currentToken = [\n                            \"word\",\n                            css.slice(pos, next + 1),\n                            pos,\n                            next\n                        ];\n                        buffer.push(currentToken);\n                        pos = next;\n                    }\n                    break;\n                }\n        }\n        pos++;\n        return currentToken;\n    }\n    function back(token) {\n        returned.push(token);\n    }\n    return {\n        back,\n        endOfFile,\n        nextToken,\n        position\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvdG9rZW5pemUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxlQUFlLElBQUlDLFVBQVUsQ0FBQztBQUNwQyxNQUFNQyxlQUFlLElBQUlELFVBQVUsQ0FBQztBQUNwQyxNQUFNRSxZQUFZLEtBQUtGLFVBQVUsQ0FBQztBQUNsQyxNQUFNRyxRQUFRLElBQUlILFVBQVUsQ0FBQztBQUM3QixNQUFNSSxVQUFVLEtBQUtKLFVBQVUsQ0FBQztBQUNoQyxNQUFNSyxRQUFRLElBQUlMLFVBQVUsQ0FBQztBQUM3QixNQUFNTSxPQUFPLEtBQUtOLFVBQVUsQ0FBQztBQUM3QixNQUFNTyxNQUFNLElBQUtQLFVBQVUsQ0FBQztBQUM1QixNQUFNUSxLQUFLLEtBQUtSLFVBQVUsQ0FBQztBQUMzQixNQUFNUyxjQUFjLElBQUlULFVBQVUsQ0FBQztBQUNuQyxNQUFNVSxlQUFlLElBQUlWLFVBQVUsQ0FBQztBQUNwQyxNQUFNVyxtQkFBbUIsSUFBSVgsVUFBVSxDQUFDO0FBQ3hDLE1BQU1ZLG9CQUFvQixJQUFJWixVQUFVLENBQUM7QUFDekMsTUFBTWEsYUFBYSxJQUFJYixVQUFVLENBQUM7QUFDbEMsTUFBTWMsY0FBYyxJQUFJZCxVQUFVLENBQUM7QUFDbkMsTUFBTWUsWUFBWSxJQUFJZixVQUFVLENBQUM7QUFDakMsTUFBTWdCLFdBQVcsSUFBSWhCLFVBQVUsQ0FBQztBQUNoQyxNQUFNaUIsUUFBUSxJQUFJakIsVUFBVSxDQUFDO0FBQzdCLE1BQU1rQixLQUFLLElBQUlsQixVQUFVLENBQUM7QUFFMUIsTUFBTW1CLFlBQVk7QUFDbEIsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxpQkFBaUI7QUFDdkIsTUFBTUMsZ0JBQWdCO0FBRXRCQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsVUFBVUMsS0FBSyxFQUFFQyxVQUFVLENBQUMsQ0FBQztJQUNyRCxJQUFJQyxNQUFNRixNQUFNRSxHQUFHLENBQUNDLE9BQU87SUFDM0Is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d0JBQ0xiLFlBQVl5QyxTQUFTLEdBQUdsQixNQUFNO3dCQUM5QnZCLFlBQVl3QyxJQUFJLENBQUNoQzt3QkFDakIsSUFBSVIsWUFBWXlDLFNBQVMsS0FBSyxHQUFHOzRCQUMvQjVCLE9BQU9MLElBQUljLE1BQU0sR0FBRzt3QkFDdEIsT0FBTzs0QkFDTFQsT0FBT2IsWUFBWXlDLFNBQVMsR0FBRzt3QkFDakM7d0JBRUFwQixlQUFlOzRCQUFDOzRCQUFRYixJQUFJMkIsS0FBSyxDQUFDWixLQUFLVixPQUFPOzRCQUFJVTs0QkFBS1Y7eUJBQUs7d0JBQzVEVyxPQUFPbUIsSUFBSSxDQUFDdEI7d0JBQ1pFLE1BQU1WO29CQUNSO29CQUVBO2dCQUNGO1FBQ0Y7UUFFQVU7UUFDQSxPQUFPRjtJQUNUO0lBRUEsU0FBU3VCLEtBQUtDLEtBQUs7UUFDakJwQixTQUFTa0IsSUFBSSxDQUFDRTtJQUNoQjtJQUVBLE9BQU87UUFDTEQ7UUFDQWQ7UUFDQUM7UUFDQUw7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Rva2VuaXplLmpzPzQzN2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IFNJTkdMRV9RVU9URSA9IFwiJ1wiLmNoYXJDb2RlQXQoMClcbmNvbnN0IERPVUJMRV9RVU9URSA9ICdcIicuY2hhckNvZGVBdCgwKVxuY29uc3QgQkFDS1NMQVNIID0gJ1xcXFwnLmNoYXJDb2RlQXQoMClcbmNvbnN0IFNMQVNIID0gJy8nLmNoYXJDb2RlQXQoMClcbmNvbnN0IE5FV0xJTkUgPSAnXFxuJy5jaGFyQ29kZUF0KDApXG5jb25zdCBTUEFDRSA9ICcgJy5jaGFyQ29kZUF0KDApXG5jb25zdCBGRUVEID0gJ1xcZicuY2hhckNvZGVBdCgwKVxuY29uc3QgVEFCID0gJ1xcdCcuY2hhckNvZGVBdCgwKVxuY29uc3QgQ1IgPSAnXFxyJy5jaGFyQ29kZUF0KDApXG5jb25zdCBPUEVOX1NRVUFSRSA9ICdbJy5jaGFyQ29kZUF0KDApXG5jb25zdCBDTE9TRV9TUVVBUkUgPSAnXScuY2hhckNvZGVBdCgwKVxuY29uc3QgT1BFTl9QQVJFTlRIRVNFUyA9ICcoJy5jaGFyQ29kZUF0KDApXG5jb25zdCBDTE9TRV9QQVJFTlRIRVNFUyA9ICcpJy5jaGFyQ29kZUF0KDApXG5jb25zdCBPUEVOX0NVUkxZID0gJ3snLmNoYXJDb2RlQXQoMClcbmNvbnN0IENMT1NFX0NVUkxZID0gJ30nLmNoYXJDb2RlQXQoMClcbmNvbnN0IFNFTUlDT0xPTiA9ICc7Jy5jaGFyQ29kZUF0KDApXG5jb25zdCBBU1RFUklTSyA9ICcqJy5jaGFyQ29kZUF0KDApXG5jb25zdCBDT0xPTiA9ICc6Jy5jaGFyQ29kZUF0KDApXG5jb25zdCBBVCA9ICdAJy5jaGFyQ29kZUF0KDApXG5cbmNvbnN0IFJFX0FUX0VORCA9IC9bXFx0XFxuXFxmXFxyIFwiIycoKS87W1xcXFxcXF17fV0vZ1xuY29uc3QgUkVfV09SRF9FTkQgPSAvW1xcdFxcblxcZlxcciAhXCIjJygpOjtAW1xcXFxcXF17fV18XFwvKD89XFwqKS9nXG5jb25zdCBSRV9CQURfQlJBQ0tFVCA9IC8uW1xcclxcblwiJygvXFxcXF0vXG5jb25zdCBSRV9IRVhfRVNDQVBFID0gL1tcXGRhLWZdL2lcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0b2tlbml6ZXIoaW5wdXQsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgY3NzID0gaW5wdXQuY3NzLnZhbHVlT2YoKVxuICBsZXQgaWdub3JlID0gb3B0aW9ucy5pZ25vcmVFcnJvcnNcblxuICBsZXQgY29kZSwgbmV4dCwgcXVvdGUsIGNvbnRlbnQsIGVzY2FwZVxuICBsZXQgZXNjYXBlZCwgZXNjYXBlUG9zLCBwcmV2LCBuLCBjdXJyZW50VG9rZW5cblxuICBsZXQgbGVuZ3RoID0gY3NzLmxlbmd0aFxuICBsZXQgcG9zID0gMFxuICBsZXQgYnVmZmVyID0gW11cbiAgbGV0IHJldHVybmVkID0gW11cblxuICBmdW5jdGlvbiBwb3NpdGlvbigpIHtcbiAgICByZXR1cm4gcG9zXG4gIH1cblxuICBmdW5jdGlvbiB1bmNsb3NlZCh3aGF0KSB7XG4gICAgdGhyb3cgaW5wdXQuZXJyb3IoJ1VuY2xvc2VkICcgKyB3aGF0LCBwb3MpXG4gIH1cblxuICBmdW5jdGlvbiBlbmRPZkZpbGUoKSB7XG4gICAgcmV0dXJuIHJldHVybmVkLmxlbmd0aCA9PT0gMCAmJiBwb3MgPj0gbGVuZ3RoXG4gIH1cblxuICBmdW5jdGlvbiBuZXh0VG9rZW4ob3B0cykge1xuICAgIGlmIChyZXR1cm5lZC5sZW5ndGgpIHJldHVybiByZXR1cm5lZC5wb3AoKVxuICAgIGlmIChwb3MgPj0gbGVuZ3RoKSByZXR1cm5cblxuICAgIGxldCBpZ25vcmVVbmNsb3NlZCA9IG9wdHMgPyBvcHRzLmlnbm9yZVVuY2xvc2VkIDogZmFsc2VcblxuICAgIGNvZGUgPSBjc3MuY2hhckNvZGVBdChwb3MpXG5cbiAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgIGNhc2UgTkVXTElORTpcbiAgICAgIGNhc2UgU1BBQ0U6XG4gICAgICBjYXNlIFRBQjpcbiAgICAgIGNhc2UgQ1I6XG4gICAgICBjYXNlIEZFRUQ6IHtcbiAgICAgICAgbmV4dCA9IHBvc1xuICAgICAgICBkbyB7XG4gICAgICAgICAgbmV4dCArPSAxXG4gICAgICAgICAgY29kZSA9IGNzcy5jaGFyQ29kZUF0KG5leHQpXG4gICAgICAgIH0gd2hpbGUgKFxuICAgICAgICAgIGNvZGUgPT09IFNQQUNFIHx8XG4gICAgICAgICAgY29kZSA9PT0gTkVXTElORSB8fFxuICAgICAgICAgIGNvZGUgPT09IFRBQiB8fFxuICAgICAgICAgIGNvZGUgPT09IENSIHx8XG4gICAgICAgICAgY29kZSA9PT0gRkVFRFxuICAgICAgICApXG5cbiAgICAgICAgY3VycmVudFRva2VuID0gWydzcGFjZScsIGNzcy5zbGljZShwb3MsIG5leHQpXVxuICAgICAgICBwb3MgPSBuZXh0IC0gMVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlIE9QRU5fU1FVQVJFOlxuICAgICAgY2FzZSBDTE9TRV9TUVVBUkU6XG4gICAgICBjYXNlIE9QRU5fQ1VSTFk6XG4gICAgICBjYXNlIENMT1NFX0NVUkxZOlxuICAgICAgY2FzZSBDT0xPTjpcbiAgICAgIGNhc2UgU0VNSUNPTE9OOlxuICAgICAgY2FzZSBDTE9TRV9QQVJFTlRIRVNFUzoge1xuICAgICAgICBsZXQgY29udHJvbENoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIGN1cnJlbnRUb2tlbiA9IFtjb250cm9sQ2hhciwgY29udHJvbENoYXIsIHBvc11cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBPUEVOX1BBUkVOVEhFU0VTOiB7XG4gICAgICAgIHByZXYgPSBidWZmZXIubGVuZ3RoID8gYnVmZmVyLnBvcCgpWzFdIDogJydcbiAgICAgICAgbiA9IGNzcy5jaGFyQ29kZUF0KHBvcyArIDEpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcmV2ID09PSAndXJsJyAmJlxuICAgICAgICAgIG4gIT09IFNJTkdMRV9RVU9URSAmJlxuICAgICAgICAgIG4gIT09IERPVUJMRV9RVU9URSAmJlxuICAgICAgICAgIG4gIT09IFNQQUNFICYmXG4gICAgICAgICAgbiAhPT0gTkVXTElORSAmJlxuICAgICAgICAgIG4gIT09IFRBQiAmJlxuICAgICAgICAgIG4gIT09IEZFRUQgJiZcbiAgICAgICAgICBuICE9PSBDUlxuICAgICAgICApIHtcbiAgICAgICAgICBuZXh0ID0gcG9zXG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgZXNjYXBlZCA9IGZhbHNlXG4gICAgICAgICAgICBuZXh0ID0gY3NzLmluZGV4T2YoJyknLCBuZXh0ICsgMSlcbiAgICAgICAgICAgIGlmIChuZXh0ID09PSAtMSkge1xuICAgICAgICAgICAgICBpZiAoaWdub3JlIHx8IGlnbm9yZVVuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgbmV4dCA9IHBvc1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdW5jbG9zZWQoJ2JyYWNrZXQnKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlc2NhcGVQb3MgPSBuZXh0XG4gICAgICAgICAgICB3aGlsZSAoY3NzLmNoYXJDb2RlQXQoZXNjYXBlUG9zIC0gMSkgPT09IEJBQ0tTTEFTSCkge1xuICAgICAgICAgICAgICBlc2NhcGVQb3MgLT0gMVxuICAgICAgICAgICAgICBlc2NhcGVkID0gIWVzY2FwZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlIChlc2NhcGVkKVxuXG4gICAgICAgICAgY3VycmVudFRva2VuID0gWydicmFja2V0cycsIGNzcy5zbGljZShwb3MsIG5leHQgKyAxKSwgcG9zLCBuZXh0XVxuXG4gICAgICAgICAgcG9zID0gbmV4dFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQgPSBjc3MuaW5kZXhPZignKScsIHBvcyArIDEpXG4gICAgICAgICAgY29udGVudCA9IGNzcy5zbGljZShwb3MsIG5leHQgKyAxKVxuXG4gICAgICAgICAgaWYgKG5leHQgPT09IC0xIHx8IFJFX0JBRF9CUkFDS0VULnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgICAgIGN1cnJlbnRUb2tlbiA9IFsnKCcsICcoJywgcG9zXVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyZW50VG9rZW4gPSBbJ2JyYWNrZXRzJywgY29udGVudCwgcG9zLCBuZXh0XVxuICAgICAgICAgICAgcG9zID0gbmV4dFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgU0lOR0xFX1FVT1RFOlxuICAgICAgY2FzZSBET1VCTEVfUVVPVEU6IHtcbiAgICAgICAgcXVvdGUgPSBjb2RlID09PSBTSU5HTEVfUVVPVEUgPyBcIidcIiA6ICdcIidcbiAgICAgICAgbmV4dCA9IHBvc1xuICAgICAgICBkbyB7XG4gICAgICAgICAgZXNjYXBlZCA9IGZhbHNlXG4gICAgICAgICAgbmV4dCA9IGNzcy5pbmRleE9mKHF1b3RlLCBuZXh0ICsgMSlcbiAgICAgICAgICBpZiAobmV4dCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChpZ25vcmUgfHwgaWdub3JlVW5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgbmV4dCA9IHBvcyArIDFcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHVuY2xvc2VkKCdzdHJpbmcnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlc2NhcGVQb3MgPSBuZXh0XG4gICAgICAgICAgd2hpbGUgKGNzcy5jaGFyQ29kZUF0KGVzY2FwZVBvcyAtIDEpID09PSBCQUNLU0xBU0gpIHtcbiAgICAgICAgICAgIGVzY2FwZVBvcyAtPSAxXG4gICAgICAgICAgICBlc2NhcGVkID0gIWVzY2FwZWRcbiAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGVzY2FwZWQpXG5cbiAgICAgICAgY3VycmVudFRva2VuID0gWydzdHJpbmcnLCBjc3Muc2xpY2UocG9zLCBuZXh0ICsgMSksIHBvcywgbmV4dF1cbiAgICAgICAgcG9zID0gbmV4dFxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlIEFUOiB7XG4gICAgICAgIFJFX0FUX0VORC5sYXN0SW5kZXggPSBwb3MgKyAxXG4gICAgICAgIFJFX0FUX0VORC50ZXN0KGNzcylcbiAgICAgICAgaWYgKFJFX0FUX0VORC5sYXN0SW5kZXggPT09IDApIHtcbiAgICAgICAgICBuZXh0ID0gY3NzLmxlbmd0aCAtIDFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0ID0gUkVfQVRfRU5ELmxhc3RJbmRleCAtIDJcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRUb2tlbiA9IFsnYXQtd29yZCcsIGNzcy5zbGljZShwb3MsIG5leHQgKyAxKSwgcG9zLCBuZXh0XVxuXG4gICAgICAgIHBvcyA9IG5leHRcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBCQUNLU0xBU0g6IHtcbiAgICAgICAgbmV4dCA9IHBvc1xuICAgICAgICBlc2NhcGUgPSB0cnVlXG4gICAgICAgIHdoaWxlIChjc3MuY2hhckNvZGVBdChuZXh0ICsgMSkgPT09IEJBQ0tTTEFTSCkge1xuICAgICAgICAgIG5leHQgKz0gMVxuICAgICAgICAgIGVzY2FwZSA9ICFlc2NhcGVcbiAgICAgICAgfVxuICAgICAgICBjb2RlID0gY3NzLmNoYXJDb2RlQXQobmV4dCArIDEpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBlc2NhcGUgJiZcbiAgICAgICAgICBjb2RlICE9PSBTTEFTSCAmJlxuICAgICAgICAgIGNvZGUgIT09IFNQQUNFICYmXG4gICAgICAgICAgY29kZSAhPT0gTkVXTElORSAmJlxuICAgICAgICAgIGNvZGUgIT09IFRBQiAmJlxuICAgICAgICAgIGNvZGUgIT09IENSICYmXG4gICAgICAgICAgY29kZSAhPT0gRkVFRFxuICAgICAgICApIHtcbiAgICAgICAgICBuZXh0ICs9IDFcbiAgICAgICAgICBpZiAoUkVfSEVYX0VTQ0FQRS50ZXN0KGNzcy5jaGFyQXQobmV4dCkpKSB7XG4gICAgICAgICAgICB3aGlsZSAoUkVfSEVYX0VTQ0FQRS50ZXN0KGNzcy5jaGFyQXQobmV4dCArIDEpKSkge1xuICAgICAgICAgICAgICBuZXh0ICs9IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjc3MuY2hhckNvZGVBdChuZXh0ICsgMSkgPT09IFNQQUNFKSB7XG4gICAgICAgICAgICAgIG5leHQgKz0gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRUb2tlbiA9IFsnd29yZCcsIGNzcy5zbGljZShwb3MsIG5leHQgKyAxKSwgcG9zLCBuZXh0XVxuXG4gICAgICAgIHBvcyA9IG5leHRcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAoY29kZSA9PT0gU0xBU0ggJiYgY3NzLmNoYXJDb2RlQXQocG9zICsgMSkgPT09IEFTVEVSSVNLKSB7XG4gICAgICAgICAgbmV4dCA9IGNzcy5pbmRleE9mKCcqLycsIHBvcyArIDIpICsgMVxuICAgICAgICAgIGlmIChuZXh0ID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoaWdub3JlIHx8IGlnbm9yZVVuY2xvc2VkKSB7XG4gICAgICAgICAgICAgIG5leHQgPSBjc3MubGVuZ3RoXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB1bmNsb3NlZCgnY29tbWVudCcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudFRva2VuID0gWydjb21tZW50JywgY3NzLnNsaWNlKHBvcywgbmV4dCArIDEpLCBwb3MsIG5leHRdXG4gICAgICAgICAgcG9zID0gbmV4dFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFJFX1dPUkRfRU5ELmxhc3RJbmRleCA9IHBvcyArIDFcbiAgICAgICAgICBSRV9XT1JEX0VORC50ZXN0KGNzcylcbiAgICAgICAgICBpZiAoUkVfV09SRF9FTkQubGFzdEluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICBuZXh0ID0gY3NzLmxlbmd0aCAtIDFcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dCA9IFJFX1dPUkRfRU5ELmxhc3RJbmRleCAtIDJcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJyZW50VG9rZW4gPSBbJ3dvcmQnLCBjc3Muc2xpY2UocG9zLCBuZXh0ICsgMSksIHBvcywgbmV4dF1cbiAgICAgICAgICBidWZmZXIucHVzaChjdXJyZW50VG9rZW4pXG4gICAgICAgICAgcG9zID0gbmV4dFxuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwb3MrK1xuICAgIHJldHVybiBjdXJyZW50VG9rZW5cbiAgfVxuXG4gIGZ1bmN0aW9uIGJhY2sodG9rZW4pIHtcbiAgICByZXR1cm5lZC5wdXNoKHRva2VuKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiYWNrLFxuICAgIGVuZE9mRmlsZSxcbiAgICBuZXh0VG9rZW4sXG4gICAgcG9zaXRpb25cbiAgfVxufVxuIl0sIm5hbWVzIjpbIlNJTkdMRV9RVU9URSIsImNoYXJDb2RlQXQiLCJET1VCTEVfUVVPVEUiLCJCQUNLU0xBU0giLCJTTEFTSCIsIk5FV0xJTkUiLCJTUEFDRSIsIkZFRUQiLCJUQUIiLCJDUiIsIk9QRU5fU1FVQVJFIiwiQ0xPU0VfU1FVQVJFIiwiT1BFTl9QQVJFTlRIRVNFUyIsIkNMT1NFX1BBUkVOVEhFU0VTIiwiT1BFTl9DVVJMWSIsIkNMT1NFX0NVUkxZIiwiU0VNSUNPTE9OIiwiQVNURVJJU0siLCJDT0xPTiIsIkFUIiwiUkVfQVRfRU5EIiwiUkVfV09SRF9FTkQiLCJSRV9CQURfQlJBQ0tFVCIsIlJFX0hFWF9FU0NBUEUiLCJtb2R1bGUiLCJleHBvcnRzIiwidG9rZW5pemVyIiwiaW5wdXQiLCJvcHRpb25zIiwiY3NzIiwidmFsdWVPZiIsImlnbm9yZSIsImlnbm9yZUVycm9ycyIsImNvZGUiLCJuZXh0IiwicXVvdGUiLCJjb250ZW50IiwiZXNjYXBlIiwiZXNjYXBlZCIsImVzY2FwZVBvcyIsInByZXYiLCJuIiwiY3VycmVudFRva2VuIiwibGVuZ3RoIiwicG9zIiwiYnVmZmVyIiwicmV0dXJuZWQiLCJwb3NpdGlvbiIsInVuY2xvc2VkIiwid2hhdCIsImVycm9yIiwiZW5kT2ZGaWxlIiwibmV4dFRva2VuIiwib3B0cyIsInBvcCIsImlnbm9yZVVuY2xvc2VkIiwic2xpY2UiLCJjb250cm9sQ2hhciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImluZGV4T2YiLCJ0ZXN0IiwibGFzdEluZGV4IiwiY2hhckF0IiwicHVzaCIsImJhY2siLCJ0b2tlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/tokenize.js\n");

/***/ })

};
;